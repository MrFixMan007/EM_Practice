package ru.effectivem.rxjavapractice

import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import com.jakewharton.rxbinding2.widget.RxTextView
import io.reactivex.BackpressureStrategy
import io.reactivex.Completable
import io.reactivex.Flowable
import io.reactivex.Maybe
import io.reactivex.Observable
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.CompositeDisposable
import io.reactivex.schedulers.Schedulers
import io.reactivex.subjects.ReplaySubject
import retrofit2.Retrofit
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory
import retrofit2.converter.gson.GsonConverterFactory
import ru.effectivem.rxjavapractice.data.api.ApiService
import ru.effectivem.rxjavapractice.data.api.MockDiscountService
import ru.effectivem.rxjavapractice.domain.DiscountCard
import ru.effectivem.rxjavapractice.domain.Joke
import java.util.concurrent.TimeUnit

class MainActivity : AppCompatActivity() {

    private lateinit var apiService: ApiService
    private lateinit var mockDiscountApi1: MockDiscountService
    private lateinit var mockDiscountApi2: MockDiscountService

    private lateinit var button: Button
    private lateinit var textView: TextView
    private lateinit var timerTextView: TextView
    private lateinit var editText: EditText
    private lateinit var discountRequestButton1: Button
    private lateinit var discountRequestButton2: Button

    private lateinit var disposeBag: CompositeDisposable

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)

        init()
        initApi()
        setupUi()
        setupTimer()
        setupObserverInput()
        schedulers()
    }

    private fun init() {
        disposeBag = CompositeDisposable()
        val sub = CompositeDisposable()
    }

    private fun initApi() {
        val retrofit = Retrofit.Builder()
            .baseUrl("https://jsonplaceholder.typicode.com/") // API
            .addConverterFactory(GsonConverterFactory.create())
            .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
            .build()

        apiService = retrofit.create(ApiService::class.java)
        mockDiscountApi1 = MockDiscountService("As")
        mockDiscountApi2 = MockDiscountService("Bs")
    }

    private fun setupUi() {
        button = findViewById(R.id.buttonFetch)
        button.setOnClickListener { fetchPost() }

        textView = findViewById(R.id.textViewResult)
        timerTextView = findViewById(R.id.textViewTimer)
        editText = findViewById(R.id.editTextInput)

        discountRequestButton1 = findViewById(R.id.apiRequest1)
        discountRequestButton1.setOnClickListener { fetchDiscountCards() }

        discountRequestButton2 = findViewById(R.id.apiRequest2)
        discountRequestButton2.setOnClickListener { fetchDiscountCardsOrNull() }
    }

    private fun fetchPost() { // –°–¥–µ–ª–∞–π—Ç–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        disposeBag.add(apiService.getPost()
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .map {
                Joke(it.title)
            }
            .subscribe(
                {
                    textView.text = it.text
                },
                {
                    textView.text = applicationContext.getText(R.string.result_tip)
                    toast("–û—à–∏–±–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º ${it.message}")
                }
            )
        )
    }

    private fun setupTimer() { // –°–¥–µ–ª–∞–π—Ç–µ —Ç–∞–π–º–µ—Ä. TextView –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É –º–µ–Ω—è–µ—Ç—Å—è
        disposeBag.add(Observable.interval(1, TimeUnit.SECONDS, Schedulers.io())
            .subscribeOn(AndroidSchedulers.mainThread())
            .subscribe {
                timerTextView.text = "$it"
            }
        )
    }

    private fun setupObserverInput() { // –°–¥–µ–ª–∞–π—Ç–µ EditText. –ü—Ä–∏ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞ –≤—ã–≤–æ–¥–∏—Ç–µ –≤ –ª–æ–≥
        // —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ EditText –≤—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 —Å–µ–∫—É–Ω–¥—ã —á—Ç–æ-—Ç–æ –Ω–µ –≤–≤–æ–¥–∏–ª (debounce)
        disposeBag.add(RxTextView.textChanges(editText)
            .skipInitialValue()
            .debounce(3, TimeUnit.SECONDS)
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe { text ->
                if (text.isNotEmpty()) {
                    Log.d("EditText", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª: $text")
                    toast("${text.trim()}")
                }
            }
        )
    }

    private fun toast(message: String) {
        Toast.makeText(applicationContext, message, Toast.LENGTH_SHORT).show()
    }

    override fun onDestroy() {
        super.onDestroy()
        disposeBag.dispose()
    }

    private fun fetchDiscountCards() { //–∞) –ï—Å–ª–∏ 1 –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞–¥–∞–µ—Ç, —Ç–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å
        // (–Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥ RX –¥–ª—è —Ç–∞–∫–æ–≥–æ, —á—Ç–æ–± —Å–∞–º–æ–º—É –Ω–µ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –ª–æ–≥–∏–∫—É)
        disposeBag.add(Observable.zip(
            mockDiscountApi1.getDiscountCards()
                .observeOn(AndroidSchedulers.mainThread())
                .doOnError {
                    toast("${it.message}")
                }.onErrorReturn {
                    emptyList()
                },
            mockDiscountApi2.getDiscountCards()
                .observeOn(AndroidSchedulers.mainThread())
                .doOnError {
                    toast("${it.message}")
                }.onErrorReturn {
                    emptyList()
                }
        ) { list1, list2 -> list1 + list2 }
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .map {
                it.map { cardResponse ->
                    DiscountCard(
                        name = cardResponse.name,
                        discountSize = cardResponse.discountSize,
                    )
                }
            }
            .subscribe { result ->
                textView.text = if (result.isNullOrEmpty()) "" else result.toString()
            }
        )
    }

    private fun fetchDiscountCardsOrNull() { // –±) –ï—Å–ª–∏ 1 –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞–¥–∞–µ—Ç, —Ç–æ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∏—á–µ–≥–æ (–Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥ RX)
        disposeBag.add(Observable.zip(
            mockDiscountApi1.getDiscountCards(),
            mockDiscountApi2.getDiscountCards()
        ) { list1, list2 -> list1 + list2 }
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .map {
                it.map { cardResponse ->
                    DiscountCard(
                        name = cardResponse.name,
                        discountSize = cardResponse.discountSize,
                    )
                }
            }
            .subscribe(
                { result -> textView.text = result.toString() },
                { error ->
                    toast("üî• ${error.message}")
                    textView.text = ""
                }
            )
        )
    }

    private fun schedulers() {
        // RxCachedThreadScheduler Schedulers.io()
        // RxNewThreadScheduler Schedulers.newThread()
        // RxSingleScheduler Schedulers.single()
        // RxComputationThreadPool Schedulers.computation()

        // –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Schedulers.newThread(), —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ RxNewThreadScheduler-1.
        // –¢–∞–π–º–µ—Ä –∂–¥–µ—Ç 10 –º—Å –∏ –∑–∞—Ç–µ–º —ç–º–∏—Ç–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.
        disposeBag.add(Observable.timer(10, TimeUnit.MILLISECONDS, Schedulers.newThread())
            // subscribeOn(Schedulers.io()) –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç, —Ç–∞–∫ –∫–∞–∫
            // subscribeOn –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –º–µ—Å—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∏, –∞ —Ç–∞–π–º–µ—Ä —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞ newThread.
            .subscribeOn(Schedulers.io())
            .map {
                // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Ç–æ–º –∂–µ –ø–æ—Ç–æ–∫–µ, –≥–¥–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω Observable.timer(), —Ç–æ –µ—Å—Ç—å RxNewThreadScheduler-1.
                Log.d("HAHAHA", "mapThread = ${Thread.currentThread().name}")
            }
            // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–æ —Å —É—á–µ—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ subscribeOn(Schedulers.computation()),
            // –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ RxComputationThreadPool-1.
            .doOnSubscribe {
                Log.d("HAHAHA", "onSubscribeThread = ${Thread.currentThread().name}")
            }
            // –ø–æ–≤–ª–∏—è–ª –Ω–∞ doOnSubscribe
            .subscribeOn(Schedulers.computation())
            .retryUntil {
                true
            }
            .retryWhen { err ->
                if (err.take(1) == null) Completable.create {
                    it.onComplete()
                }.toObservable<Int>() else Maybe.just(0).toObservable()
            }
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ—Ç–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ RxSingleScheduler-1.
            .observeOn(Schedulers.single())
            .flatMap {
                Log.d("HAHAHA", "flatMapThread = ${Thread.currentThread().name}")
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ—Ç–æ–∫ –Ω–∞ RxCachedThreadScheduler
                Observable.just(it)
                    .subscribeOn(Schedulers.io())
            }
            // subscribe –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ flatMap, –∫–æ—Ç–æ—Ä—ã–π –≤—Å—ë –µ—â—ë RxSingleScheduler-1,
            // –Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É Observable.just(it).subscribeOn(Schedulers.io()) –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å subscribe,
            // —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ RxCachedThreadScheduler-1.
            .subscribe {
                Log.d("HAHAHA", "subscribeThread = ${Thread.currentThread().name}")
            }
        )

        val a = Flowable.create(
            {
                it.onNext(5)
            },
            BackpressureStrategy.BUFFER
        )

        disposeBag.add(
            Observable.just(10, 20, 30)
                .onErrorResumeNext { e: Throwable ->
                    Observable.just(10, 20, 30)
                }
                .subscribe { println("‚úÖ Item: $it") }
        )

        val obs = create()

        val publish = obs.concatMap {
            Observable.just(it)
        }.publish().refCount()

        publish.subscribe {
            println("11 $it")
        }


        publish.subscribe {
            println("22 $it")
        }
//
        // –°–æ–∑–¥–∞–Ω–∏–µ PublishSubject
//        val publishSubject = PublishSubject.create<Int>()
//
//        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ PublishSubject
//        val disposable = publishSubject.subscribe(
//            // onNext - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
//            { value -> println("–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: $value") },
//            // onError - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
//            { error -> println("–û—à–∏–±–∫–∞: ${error.message}") },
//            // onComplete - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//            { println("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞") }
//        )
//
//        val singlke = Maybe.create<Int> {
//            it.onSuccess(5)
//            it.onComplete()
//        }
//
//        // –≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
//        publishSubject.onNext(1)
//        publishSubject.onNext(2)
//        publishSubject.onNext(3)
//
//        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//        publishSubject.onComplete()
//
//        // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç PublishSubject
//        disposable.dispose()
//
//
//        val userInput = Observable.just(
//            "100", "150", "200",
//            "300", "400", "500"
//        )
//            .timestamp()
//            .concatMap {
//                Observable.just(it).delay(it.value().toLong(), TimeUnit.MILLISECONDS)
//            } // —ç–º—É–ª—è—Ü–∏—è "–≤–≤–æ–¥–∞"

//        disposeBag.add(
//
//            userInput
//                .switchMap { query -> fakeApiCall("${query.value()} ${query.time()}") }
//                // –æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–æ–≤–æ–º –≤–≤–æ–¥–µ
//                .subscribe { result -> println("Search result: $result") }
//
//        )
//
//        Flowable.create()

        val flo = ReplaySubject.createWithTimeAndSize<Int>( )

        val flowable = Observable.interval(1, TimeUnit.SECONDS)
            .replay()
    }
}

fun fakeApiCall(query: String): Observable<String> {
    return Observable.just("Results for: $query")
        .subscribeOn(Schedulers.)
        .delay(200, TimeUnit.MILLISECONDS) // –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –±—É–¥—Ç–æ –∏–¥—ë—Ç 1 —Å–µ–∫—É–Ω–¥—É
}

fun main() {

    val bag = CompositeDisposable()

    bag.addAll(

        Observable.interval(1000, TimeUnit.MILLISECONDS).map { it.toInt() }.subscribe {
            println("1 $it")
        },

        create().subscribe({
            println(it)
        },
            {

            },
            {

            }
        )

    )

}

fun create(): Observable<Int> = Observable.create { emitter ->
    with(emitter) {
        repeat(10) {
            onNext(it)
        }
        onComplete()
    }
}


fun create1() = Observable.timer(2000, TimeUnit.MILLISECONDS).map { it.toInt() }.forEach {
    println("1 $it")
}

fun flowable(): Flowable<Int> = create().toFlowable(BackpressureStrategy.BUFFER)


fun create2() = Observable.defer {
    Observable.just(5)
}